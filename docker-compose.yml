version: '3'
services:
  rabbitmq:
    image: "rabbitmq:management"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  fastapi:
    build:
      context: .
      dockerfile: ./fastapi_app/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - db_data:/app  # Shared volume to ensure all services use the same SQLite database
    environment:
      DATABASE_URL: ${DATABASE_URL}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      CELERY_QUEUE_NAME: ${CELERY_QUEUE_NAME}
    depends_on:
      rabbitmq:
        condition: service_healthy

  celery_worker:
    build:
      context: .
      dockerfile: ./celery_app/Dockerfile
    command: celery -A celery_app.celery_tasks worker --loglevel=info
    volumes:
      - db_data:/app  # Shared volume to ensure all services use the same SQLite database
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_QUEUE_NAME: ${CELERY_QUEUE_NAME}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq_consumer:
    build:
      context: .
      dockerfile: ./celery_app/Dockerfile
    command: python celery_app/rabbitmq_consumer.py
    volumes:
      - db_data:/app  # Shared volume to ensure all services use the same SQLite database
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_QUEUE_NAME: ${CELERY_QUEUE_NAME}
      DATABASE_URL: ${DATABASE_URL}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes:
  db_data:
